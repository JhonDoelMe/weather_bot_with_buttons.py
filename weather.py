import aiohttp
import asyncio
import logging
from telegram import Update, CallbackQuery
from telegram.ext import CallbackContext
from cachetools import TTLCache
from aiohttp import ClientError, ServerTimeoutError
from message_utils import send_message_with_retries
from config import WEATHER_API_KEY
from user_data import save_user_data, load_user_data
from datetime import datetime

logger = logging.getLogger(__name__)

weather_emojis = {
    "—è—Å–Ω–æ": "‚òÄÔ∏è",
    "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": "‚õÖÔ∏è",
    "–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏": "üå§",
    "–æ–±–ª–∞—á–Ω–æ": "‚òÅÔ∏è",
    "–ø–∞—Å–º—É—Ä–Ω–æ": "‚òÅÔ∏è",
    "–¥–æ–∂–¥—å": "üåß",
    "–≥—Ä–æ–∑–∞": "‚õà",
    "—Å–Ω–µ–≥": "‚ùÑÔ∏è",
    "—Ç—É–º–∞–Ω": "üå´"
}

wind_directions = [
    "—Å–µ–≤–µ—Ä–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", "–≤–æ—Å—Ç–æ—á–Ω–æ-—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π",
    "–≤–æ—Å—Ç–æ—á–Ω—ã–π", "–≤–æ—Å—Ç–æ—á–Ω–æ-—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", "—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", "—é–≥–æ-—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π",
    "—é–∂–Ω—ã–π", "—é–≥–æ-—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π", "—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π", "–∑–∞–ø–∞–¥–Ω–æ-—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π",
    "–∑–∞–ø–∞–¥–Ω—ã–π", "–∑–∞–ø–∞–¥–Ω–æ-—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π"
]

weather_cache = TTLCache(maxsize=500, ttl=600)

def get_weather_emoji(description):
    for key in weather_emojis:
        if key in description:
            return weather_emojis[key]
    return ""

def escape_markdown_v2(text):
    escape_chars = r'\_*[]()~`>#+-=|{}.!\\'
    return ''.join(f'\\{char}' if char in escape_chars else char for char in text)

def convert_unix_to_time(unix_time, timezone):
    return datetime.utcfromtimestamp(unix_time + timezone).strftime('%H:%M:%S (%d %B %Y)')

def get_wind_direction(deg):
    if deg is None:
        return "N/A"
    index = round(deg / 22.5) % 16
    return wind_directions[index]

async def fetch_weather_data(session, url):
    async with session.get(url, timeout=10) as response:
        return await response.json()

async def get_weather(city):
    if not city:
        logger.warning("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."

    if city in weather_cache:
        logger.info(f"–ü–æ–≥–æ–¥–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city} –≤–∑—è—Ç–∞ –∏–∑ –∫—ç—à–∞.")
        return weather_cache[city]

    url = f"http://api.openweathermap.org/data/2.5/weather?q={escape_markdown_v2(city)}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ URL: {url}")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as response:
                logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å –∫–æ–¥–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è: {response.status}")
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}")

                    weather = data.get('weather', [{}])[0].get('description', 'N/A')
                    temp = data.get('main', {}).get('temp', 'N/A')
                    feels_like = data.get('main', {}).get('feels_like', 'N/A')
                    temp_min = data.get('main', {}).get('temp_min', 'N/A')
                    temp_max = data.get('main', {}).get('temp_max', 'N/A')
                    humidity = data.get('main', {}).get('humidity', 'N/A')
                    pressure = data.get('main', {}).get('pressure', 'N/A')
                    wind_speed = data.get('wind', {}).get('speed', 'N/A')
                    wind_deg = data.get('wind', {}).get('deg', 'N/A')
                    wind_gust = data.get('wind', {}).get('gust', 'N/A')
                    sunrise = data.get('sys', {}).get('sunrise', 'N/A')
                    sunset = data.get('sys', {}).get('sunset', 'N/A')

                    weather_emoji = get_weather_emoji(weather)
                    wind_direction = get_wind_direction(wind_deg)
                    time_sunrise = convert_unix_to_time(sunrise, data.get('timezone', 0)) if sunrise != 'N/A' else 'N/A'
                    time_sunset = convert_unix_to_time(sunset, data.get('timezone', 0)) if sunset != 'N/A' else 'N/A'

                    weather_info = (
                        f"–ü–æ–≥–æ–¥–∞ –≤ {city}: {weather} {weather_emoji}\n\n"
                        f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
                        f"üå°Ô∏è –ú–∏–Ω–∏–º—É–º/–ú–∞–∫—Å–∏–º—É–º: {temp_min}¬∞C / {temp_max}¬∞C\n\n"
                        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                        f"üå¨Ô∏è –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} hPa\n\n"
                        f"üí® –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å ({wind_direction}, –ø–æ—Ä—ã–≤—ã –¥–æ {wind_gust} –º/—Å)\n\n"
                        f"üåÖ –í–æ—Å—Ö–æ–¥: {time_sunrise.split(' ')[0]}\n"
                        f"üåá –ó–∞–∫–∞—Ç: {time_sunset.split(' ')[0]}"
                    )

                    weather_cache[city] = weather_info
                    return weather_info
                elif response.status == 404:
                    logger.warning("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
                    return "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞."
                elif response.status == 429:
                    logger.warning("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API.")
                    return "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {response.status}")
                    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."
    except (asyncio.TimeoutError, ClientError, ServerTimeoutError, aiohttp.ClientConnectorError, aiohttp.ContentTypeError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."

async def get_weather_update(update: Update, context: CallbackContext):
    if isinstance(update, CallbackQuery):
        query = update
        user_id = query.from_user.id
        chat_id = query.message.chat_id
        city = context.user_data.get('city')
        if not city:
            await request_city(update, context)
            return
    else:
        user_data = load_user_data(update.effective_user.id)
        city = user_data.get('city') if user_data else None

    if city:
        weather_info = await get_weather(city)
        await send_message_with_retries(context.bot, update.effective_chat.id, weather_info)
    else:
        await request_city(update, context)

async def send_weather_update(context: CallbackContext):
    job = context.job
    city = job.data['city']
    chat_id = job.data['chat_id']
    weather_info = await get_weather(city)
    bot = context.bot
    await send_message_with_retries(bot, chat_id, weather_info)