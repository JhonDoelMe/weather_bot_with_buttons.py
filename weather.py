import aiohttp
import asyncio
import logging
from telegram import Update, CallbackQuery
from telegram.ext import CallbackContext
from cachetools import TTLCache
from aiohttp import ClientError, ServerTimeoutError
from message_utils import send_message_with_retries
from config import WEATHER_API_KEY
from user_data import save_user_data, load_user_data
from datetime import datetime

logger = logging.getLogger(__name__)

weather_emojis = {
    "—è—Å–Ω–æ": "‚òÄÔ∏è",
    "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": "‚õÖÔ∏è",
    "–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏": "üå§",
    "–æ–±–ª–∞—á–Ω–æ": "‚òÅÔ∏è",
    "–ø–∞—Å–º—É—Ä–Ω–æ": "‚òÅÔ∏è",
    "–¥–æ–∂–¥—å": "üåß",
    "–≥—Ä–æ–∑–∞": "‚õà",
    "—Å–Ω–µ–≥": "‚ùÑÔ∏è",
    "—Ç—É–º–∞–Ω": "üå´"
}

wind_directions = [
    "—Å–µ–≤–µ—Ä–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", "–≤–æ—Å—Ç–æ—á–Ω–æ-—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π",
    "–≤–æ—Å—Ç–æ—á–Ω—ã–π", "–≤–æ—Å—Ç–æ—á–Ω–æ-—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", "—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", "—é–≥–æ-—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π",
    "—é–∂–Ω—ã–π", "—é–≥–æ-—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π", "—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π", "–∑–∞–ø–∞–¥–Ω–æ-—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π",
    "–∑–∞–ø–∞–¥–Ω—ã–π", "–∑–∞–ø–∞–¥–Ω–æ-—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π"
]

weather_cache = TTLCache(maxsize=100, ttl=600)

def get_weather_emoji(description):
    for key in weather_emojis:
        if key in description:
            return weather_emojis[key]
    return ""

def convert_unix_to_time(unix_time, timezone):
    return datetime.utcfromtimestamp(unix_time + timezone).strftime('%H:%M:%S (%d %B %Y)')

def get_wind_direction(deg):
    index = round(deg / 22.5) % 16
    return wind_directions[index]

async def fetch_weather_data(session, url):
    async with session.get(url, timeout=10) as response:
        return await response.json()

async def get_weather(city):
    if not city:
        logger.warning("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."

    if city in weather_cache:
        logger.info(f"–ü–æ–≥–æ–¥–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city} –≤–∑—è—Ç–∞ –∏–∑ –∫—ç—à–∞.")
        return weather_cache[city]

    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ URL: {url}")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as response:
                logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å –∫–æ–¥–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è: {response.status}")
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")

                    weather = data['weather'][0]['description']
                    temp = data['main']['temp']
                    feels_like = data['main']['feels_like']
                    humidity = data['main']['humidity']
                    pressure = data['main']['pressure']
                    temp_min = data['main']['temp_min']
                    temp_max = data['main']['temp_max']
                    sea_level = data['main'].get('sea_level')
                    grnd_level = data['main'].get('grnd_level')
                    visibility = data.get('visibility', 'N/A')
                    wind_speed = data['wind']['speed']
                    wind_deg = data['wind']['deg']
                    wind_gust = data['wind'].get('gust')
                    clouds = data['clouds']['all']
                    dt = data['dt']
                    sys_country = data['sys']['country']
                    sunrise = data['sys']['sunrise']
                    sunset = data['sys']['sunset']
                    timezone = data['timezone']

                    weather_emoji = get_weather_emoji(weather)
                    wind_direction = get_wind_direction(wind_deg)
                    time_dt = convert_unix_to_time(dt, timezone)
                    time_sunrise = convert_unix_to_time(sunrise, timezone)
                    time_sunset = convert_unix_to_time(sunset, timezone)
                    timezone_hours = timezone // 3600

                    weather_info = (
                        f"–ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {weather} {weather_emoji}\n"
                        f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C üå°Ô∏è\n"
                        f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C üå°Ô∏è\n"
                        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_min}¬∞C üå°Ô∏è\n"
                        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_max}¬∞C üå°Ô∏è\n"
                        f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}% üíß\n"
                        f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} hPa üå¨Ô∏è\n"
                        f"–î–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ—Ä—è: {sea_level} hPa\n"
                        f"–î–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –∑–µ–º–ª–∏: {grnd_level} hPa\n"
                        f"–í–∏–¥–∏–º–æ—Å—Ç—å: {visibility} –º\n"
                        f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å üí®\n"
                        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: {wind_direction} ({wind_deg}¬∞) üß≠\n"
                        f"–ü–æ—Ä—ã–≤—ã –≤–µ—Ç—Ä–∞: {wind_gust} –º/—Å üå™Ô∏è\n"
                        f"–û–±–ª–∞—á–Ω–æ—Å—Ç—å: {clouds}% ‚òÅÔ∏è\n"
                        f"–í—Ä–µ–º—è –¥–∞–Ω–Ω—ã—Ö: {time_dt}\n"
                        f"–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã: {sys_country}\n"
                        f"–í—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞: {time_sunrise} üåÖ\n"
                        f"–í—Ä–µ–º—è –∑–∞–∫–∞—Ç–∞: {time_sunset} üåá\n"
                        f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC{timezone_hours:+}\n"
                        f"üòÉ"
                    )
                    weather_cache[city] = weather_info
                    return weather_info
                elif response.status == 404:
                    logger.warning("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
                    return "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞."
                else:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")
                    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."
    except (asyncio.TimeoutError, ClientError, ServerTimeoutError, aiohttp.ClientConnectorError, aiohttp.ContentTypeError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."

async def get_weather_update(update: Update, context: CallbackContext):
    if isinstance(update, CallbackQuery):
        query = update
        user_id = query.from_user.id
        chat_id = query.message.chat_id
        city = context.user_data.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    else:
        user_data = load_user_data(update.effective_user.id)
        city = user_data.get('city') if user_data else None

        if city:
            weather_info = await get_weather(city)
            await send_message_with_retries(context.bot, update.effective_chat.id, weather_info)
        else:
            await request_city(update, context)

async def send_weather_update(context: CallbackContext):
    job = context.job
    city = job.data['city']
    chat_id = job.data['chat_id']
    weather_info = await get_weather(city)
    bot = context.bot
    await send_message_with_retries(bot, chat_id, weather_info)
