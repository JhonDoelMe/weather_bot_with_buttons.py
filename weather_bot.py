import os
import logging
import asyncio
import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from telegram.error import TimedOut
from dotenv import load_dotenv
from cachetools import TTLCache
from aiohttp import ClientError, ServerTimeoutError

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ —Ñ–∞–π–ª—É .env
if not os.path.isfile('.env'):
    raise FileNotFoundError("–§–∞–π–ª .env –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ñ–∞–π–ª .env –ø—Ä–∏—Å—É—Ç–Ω—ñ–π —É –∫–æ—Ä–µ–Ω–µ–≤—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ø—Ä–æ–µ–∫—Ç—É.")
load_dotenv()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –∑—ñ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω—ñ–≤
if not TELEGRAM_TOKEN or not WEATHER_API_KEY:
    raise ValueError("–ù–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ç–æ–∫–µ–Ω–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ó—Ö —É —Ñ–∞–π–ª—ñ .env")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–µ—à –¥–ª—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É
weather_cache = TTLCache(maxsize=100, ttl=600)

USER_DATA_FILE = "user_data.json"

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
weather_emojis = {
    "—è—Å–Ω–æ": "‚òÄÔ∏è",
    "–ø–µ—Ä–µ–º—ñ–Ω–Ω–∞ —Ö–º–∞—Ä–Ω—ñ—Å—Ç—å": "‚õÖÔ∏è",
    "—Ö–º–∞—Ä–Ω–æ –∑ –ø—Ä–æ—è—Å–Ω–µ–Ω–Ω—è–º–∏": "üå§",
    "—Ö–º–∞—Ä–Ω–æ": "‚òÅÔ∏è",
    "–ø–∞—Å–º—É—Ä–Ω–æ": "‚òÅÔ∏è",
    "–¥–æ—â": "üåß",
    "–≥—Ä–æ–∑–∞": "‚õà",
    "—Å–Ω—ñ–≥": "‚ùÑÔ∏è",
    "—Ç—É–º–∞–Ω": "üå´"
}

# –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
def read_user_data():
    if os.path.exists(USER_DATA_FILE):
        try:
            with open(USER_DATA_FILE, 'r') as file:
                return json.load(file)
        except json.JSONDecodeError:
            logger.error("–§–∞–π–ª user_data.json –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")
            return {}
    else:
        return {}

# –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª
def save_user_data(data):
    with open(USER_DATA_FILE, 'w') as file:
        json.dump(data, file, indent=4)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –ø–æ–≥–æ–¥—ã
def get_weather_emoji(description):
    for key in weather_emojis:
        if key in description:
            return weather_emojis[key]
    return ""

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
async def get_weather(city):
    if not city:
        return "–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é."

    if city in weather_cache:
        return weather_cache[city]

    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    weather = data['weather'][0]['description']
                    temp = data['main']['temp']
                    feels_like = data['main']['feels_like']
                    humidity = data['main']['humidity']
                    pressure = data['main']['pressure']
                    weather_emoji = get_weather_emoji(weather)

                    weather_info = (
                        f"–ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
                        f"–û–ø–∏—Å: {weather} {weather_emoji}\n"
                        f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C üå°Ô∏è\n"
                        f"–í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫: {feels_like}¬∞C üå°Ô∏è\n"
                        f"–í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}% üíß\n"
                        f"–¢–∏—Å–∫: {pressure} hPa üå¨Ô∏è\n"
                        f"üòÉ"
                    )
                    weather_cache[city] = weather_info
                    return weather_info
                elif response.status == 404:
                    return "–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–æ–¥—É."
                else:
                    return "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É."
    except (asyncio.TimeoutError, ClientError, ServerTimeoutError) as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É: {e}")
        return "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –ø—ñ–∑–Ω—ñ—à–µ."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_keyboard():
    return [
        [
            InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data='update_weather'),
            InlineKeyboardButton("–ú–æ–π –≥–æ—Ä–æ–¥", callback_data='my_city'),
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data='change_city')
        ]
    ]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context):
    query = update.callback_query
    await query.answer()

    if query.data == 'update_weather':
        city = context.user_data.get('city')
        if city:
            weather_info = await get_weather(city)
            await query.edit_message_text(weather_info)
        else:
            await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_city.")

    elif query.data == 'my_city':
        city = context.user_data.get('city')
        if city:
            await query.edit_message_text(f"–í–∞—à –≥–æ—Ä–æ–¥: {city}")
        else:
            await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_city.")

    elif query.data == 'change_city':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    bot = context.bot
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã. –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É.",
        reply_markup=InlineKeyboardMarkup(get_keyboard())
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–∞
async def set_city(update: Update, context):
    city = update.message.text
    context.user_data['city'] = city  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    save_user_data(context.user_data)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    await update.message.reply_text(f"–í–∞—à –≥–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫: {city}", reply_markup=InlineKeyboardMarkup(get_keyboard()))

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    application.add_handler(CommandHandler("start", start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–∞
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, set_city))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
