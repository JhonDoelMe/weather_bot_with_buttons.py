from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, JobQueue
import requests
import logging

# –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = "7533343666:AAFtXtHra2C5C_Wgl_tMs-m04plqjWItCzI"
WEATHER_API_KEY = "31ebd431e1fab770d9981dcdb8180f89"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_cities = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã —Å OpenWeatherMap API
def get_weather(city):
    if not city:
        return "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
    
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        weather = data['weather'][0]['description']
        temp = data['main']['temp']
        feels_like = data['main']['feels_like']
        humidity = data['main']['humidity']
        pressure = data['main']['pressure']

        weather_emoji = {
            "clear sky": "‚òÄÔ∏è",
            "few clouds": "üå§",
            "scattered clouds": "‚òÅÔ∏è",
            "broken clouds": "‚òÅÔ∏è",
            "shower rain": "üåß",
            "rain": "üåß",
            "thunderstorm": "‚õà",
            "snow": "‚ùÑÔ∏è",
            "mist": "üå´"
        }

        emoji = weather_emoji.get(weather, "üå•")
        weather_info = (
            f"{emoji} {weather.capitalize()}\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
            f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: {pressure} –≥–ü–∞"
        )
        return weather_info
    else:
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}. –û—à–∏–±–∫–∞ {response.status_code}"

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("–ú–æ–π –≥–æ—Ä–æ–¥"), KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã. –í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥.",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    if text == "–ú–æ–π –≥–æ—Ä–æ–¥":
        if user_id in user_cities:
            city = user_cities[user_id]
            weather_info = get_weather(city)
            await update.message.reply_text(f"–í–∞—à –≥–æ—Ä–æ–¥: {city}\n{weather_info}")
        else:
            await update.message.reply_text("–í—ã –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≥–æ—Ä–æ–¥. –ù–∞–∂–º–∏—Ç–µ '–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥', —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ.")

    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥":
        user_cities.pop(user_id, None)
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–∞
async def set_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    city = update.message.text.strip()

    if not city:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
        return

    user_cities[user_id] = city
    weather_info = get_weather(city)
    await update.message.reply_text(
        f"–í–∞—à –≥–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city}.\n\n{weather_info}"
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≥–æ–¥—ã –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
async def send_weather(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    user_id = job.data['user_id']

    if user_id in user_cities:
        city = user_cities[user_id]
        weather_info = get_weather(city)
        await context.bot.send_message(user_id, f"–ü–æ–≥–æ–¥–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}:\n{weather_info}")
    else:
        await context.bot.send_message(user_id, "–í—ã –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≥–æ—Ä–æ–¥. –ù–∞–∂–º–∏—Ç–µ '–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥', —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    job_queue = application.job_queue

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_button_click))
    application.add_handler(MessageHandler(filters.TEXT, set_city))

    job_queue.run_repeating(send_weather, interval=7200, first=10, data={'user_id': 123456789})

    application.run_polling()

if __name__ == '__main__':
    main()
