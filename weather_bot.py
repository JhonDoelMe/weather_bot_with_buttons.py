import os
import logging
import json
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
USER_DATA_FILE = "user_data.json"
API_KEY = os.getenv("OPENWEATHER_API_KEY")  # –ü–æ–ª—É—á–∏—Ç–µ –≤–∞—à API –∫–ª—é—á –Ω–∞ OpenWeather

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON
def read_user_data():
    if os.path.exists(USER_DATA_FILE):
        with open(USER_DATA_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    return {}

# –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON
def save_user_data(data):
    with open(USER_DATA_FILE, "w", encoding="utf-8") as file:
        json.dump(data, file, indent=4)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –∏–∑ OpenWeather
async def get_weather(city):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric&lang=ru"
    response = requests.get(url)
    
    if response.status_code == 200:
        data = response.json()
        description = data['weather'][0]['description']
        temp = data['main']['temp']
        feels_like = data['main']['feels_like']
        humidity = data['main']['humidity']
        pressure = data['main']['pressure']
        return f"–ü–æ–≥–æ–¥–∞ –≤ {city}:\n–û–ø–∏—Å: {description}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C üå°Ô∏è\n–í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫: {feels_like}¬∞C üå°Ô∏è\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}% üíß\n–¢–∏—Å–∫: {pressure} hPa üå¨Ô∏è"
    else:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data="update_weather")],
        [InlineKeyboardButton("–ú–æ–π –≥–æ—Ä–æ–¥", callback_data="my_city")],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="change_city")]
    ])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context):
    user_id = update.effective_user.id
    user_data = read_user_data()

    if user_id not in user_data:
        user_data[user_id] = {"city": ""}
        save_user_data(user_data)

    keyboard = get_keyboard()
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã. –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É.",
        reply_markup=keyboard
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context):
    query = update.callback_query
    user_id = update.effective_user.id
    user_data = read_user_data()

    if query.data == "update_weather":
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–≥–æ–¥—É
        city = user_data.get(str(user_id), {}).get("city")
        if city:
            weather_info = await get_weather(city)
            await query.answer()
            await query.edit_message_text(text=weather_info)
        else:
            await query.answer()
            await query.edit_message_text(text="–ì–æ—Ä–æ–¥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥–æ—Ä–æ–¥.")

    elif query.data == "my_city":
        # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥
        city = user_data.get(str(user_id), {}).get("city", "–ì–æ—Ä–æ–¥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        await query.answer()
        await query.edit_message_text(text=f"–í–∞—à –≥–æ—Ä–æ–¥: {city}")

    elif query.data == "change_city":
        # –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥
        await query.answer()
        await query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
async def set_city(update: Update, context):
    user_id = update.effective_user.id
    city = update.message.text
    user_data = read_user_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥
    user_data[str(user_id)] = {"city": city}
    save_user_data(user_data)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await update.message.reply_text(f"–í–∞—à –≥–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫: {city}")
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_keyboard())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, set_city))

    # –ó–∞–ø—É—Å–∫
    application.run_polling()

if __name__ == "__main__":
    main()
