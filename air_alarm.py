import json
import os
import logging
import aiohttp
import requests
from config import WEATHER_API_KEY, UKRAINE_ALARM_API_KEY
from dotenv import load_dotenv

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞

logger = logging.getLogger(__name__)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –≥–æ—Ä–æ–¥–∞–º–∏ –∏ —Ä–µ–≥–∏–æ–Ω–∞–º–∏
CITIES_TO_REGIONS_FILE = 'cities_to_regions.json'

# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–≤–æ–≥–∞—Ö
API_URL = "https://api.ukrainealarm.com/api/v3/alerts"
API_KEY = UKRAINE_ALARM_API_KEY

ALERT_TYPES_TRANSLATIONS = {
    "AIR": "–í–æ–∑–¥—É—à–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞",
    "ARTILLERY": "–ê—Ä—Ç–∏–ª–ª–µ—Ä–∏–π—Å–∫–∞—è —Ç—Ä–µ–≤–æ–≥–∞",
    "URBAN_FIGHTS": "–ì–æ—Ä–æ–¥—Å–∫–∏–µ –±–æ–∏",
    "MISSILE": "–†–∞–∫–µ—Ç–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞",
    "NUCLEAR": "–Ø–¥–µ—Ä–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞",
    "CHEMICAL": "–•–∏–º–∏—á–µ—Å–∫–∞—è —Ç—Ä–µ–≤–æ–≥–∞",
    "OTHER": "–î—Ä—É–≥–∞—è —Ç—Ä–µ–≤–æ–≥–∞"
}

def load_cities_to_regions():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≥–æ—Ä–æ–¥–æ–≤ –∏ —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    try:
        if os.path.exists(CITIES_TO_REGIONS_FILE):
            with open(CITIES_TO_REGIONS_FILE, 'r', encoding='utf-8') as file:
                return json.load(file)
        else:
            logger.error(f"–§–∞–π–ª {CITIES_TO_REGIONS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return {}
    except json.JSONDecodeError:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {CITIES_TO_REGIONS_FILE}: —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")
        return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {CITIES_TO_REGIONS_FILE}: {e}")
        return {}

async def get_city_info(city):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ–¥–µ –∏–∑ OpenWeatherMap API."""
    url = f"http://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid={WEATHER_API_KEY}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                if data:
                    return data[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return None

async def update_cities_json(city, region):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –∏ —Ä–µ–≥–∏–æ–Ω –≤ JSON-—Ñ–∞–π–ª."""
    try:
        with open(CITIES_TO_REGIONS_FILE, 'r', encoding='utf-8') as file:
            cities_to_regions = json.load(file)
    except FileNotFoundError:
        cities_to_regions = {}

    cities_to_regions[city] = region

    with open(CITIES_TO_REGIONS_FILE, 'w', encoding='utf-8') as file:
        json.dump(cities_to_regions, file, ensure_ascii=False, indent=4)

async def get_or_fetch_region(city):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–≥–∏–æ–Ω –¥–ª—è –≥–æ—Ä–æ–¥–∞, –æ–±–Ω–æ–≤–ª—è—è JSON-—Ñ–∞–π–ª –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    cities_to_regions = load_cities_to_regions()
    if city in cities_to_regions:
        return cities_to_regions[city]

    # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
    city_info = await get_city_info(city)
    if city_info and 'state' in city_info:
        region = city_info['state']
        await update_cities_json(city, region)
        return region
    else:
        return None

def get_air_alarm_status():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–∑–¥—É—à–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥–∞—Ö —á–µ—Ä–µ–∑ API."""
    headers = {
        "accept": "application/json",
        "Authorization": API_KEY  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –±–µ–∑ 'Bearer'
    }
    try:
        response = requests.get(API_URL, headers=headers, timeout=10)
        if response.status_code == 200:
            data = response.json()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
            return data
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {response.status_code} - {response.text}")
            return None
    except (requests.Timeout, requests.ConnectionError, requests.RequestException) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def parse_air_alarm_data(data, city):
    """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–≤–æ–≥–∞—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    region = get_or_fetch_region(city)
    if not region:
        return f"–ì–æ—Ä–æ–¥ {city} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–µ–≥–∏–æ–Ω–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥."

    for alert in data:
        if alert.get("regionName") == region:
            active_alerts = alert.get("activeAlerts", [])
            if active_alerts:
                return f"üî¥ –í–Ω–∏–º–∞–Ω–∏–µ! –í –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ {city} –æ–±—ä—è–≤–ª–µ–Ω–∞ –≤–æ–∑–¥—É—à–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞!"
            else:
                return f"–í –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ {city} —Ç—Ä–µ–≤–æ–≥ –Ω–µ—Ç."
    return f"–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."